-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2019.1
-- Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity pointwise_conv_2d_cl_ap_fixed_ap_fixed_16_6_5_3_0_config9_s is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_continue : IN STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    data_V_dout : IN STD_LOGIC_VECTOR (911 downto 0);
    data_V_empty_n : IN STD_LOGIC;
    data_V_read : OUT STD_LOGIC;
    ap_return_0 : OUT STD_LOGIC_VECTOR (15 downto 0);
    ap_return_1 : OUT STD_LOGIC_VECTOR (15 downto 0);
    ap_return_2 : OUT STD_LOGIC_VECTOR (15 downto 0);
    ap_return_3 : OUT STD_LOGIC_VECTOR (15 downto 0);
    ap_return_4 : OUT STD_LOGIC_VECTOR (15 downto 0);
    ap_return_5 : OUT STD_LOGIC_VECTOR (15 downto 0);
    ap_return_6 : OUT STD_LOGIC_VECTOR (15 downto 0);
    ap_return_7 : OUT STD_LOGIC_VECTOR (15 downto 0);
    ap_return_8 : OUT STD_LOGIC_VECTOR (15 downto 0);
    ap_return_9 : OUT STD_LOGIC_VECTOR (15 downto 0);
    ap_return_10 : OUT STD_LOGIC_VECTOR (15 downto 0);
    ap_return_11 : OUT STD_LOGIC_VECTOR (15 downto 0);
    ap_return_12 : OUT STD_LOGIC_VECTOR (15 downto 0);
    ap_return_13 : OUT STD_LOGIC_VECTOR (15 downto 0);
    ap_return_14 : OUT STD_LOGIC_VECTOR (15 downto 0);
    ap_return_15 : OUT STD_LOGIC_VECTOR (15 downto 0);
    ap_return_16 : OUT STD_LOGIC_VECTOR (15 downto 0);
    ap_return_17 : OUT STD_LOGIC_VECTOR (15 downto 0);
    ap_return_18 : OUT STD_LOGIC_VECTOR (15 downto 0) );
end;


architecture behav of pointwise_conv_2d_cl_ap_fixed_ap_fixed_16_6_5_3_0_config9_s is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (2 downto 0) := "001";
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (2 downto 0) := "010";
    constant ap_ST_fsm_pp0_stage1 : STD_LOGIC_VECTOR (2 downto 0) := "100";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv6_0 : STD_LOGIC_VECTOR (5 downto 0) := "000000";
    constant ap_const_lv10_0 : STD_LOGIC_VECTOR (9 downto 0) := "0000000000";
    constant ap_const_lv6_38 : STD_LOGIC_VECTOR (5 downto 0) := "111000";
    constant ap_const_lv6_1 : STD_LOGIC_VECTOR (5 downto 0) := "000001";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv32_19 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011001";
    constant ap_const_lv32_18 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011000";
    constant ap_const_lv32_15 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010101";
    constant ap_const_lv8_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    constant ap_const_lv10_A : STD_LOGIC_VECTOR (9 downto 0) := "0000001010";
    constant ap_const_lv10_1 : STD_LOGIC_VECTOR (9 downto 0) := "0000000001";
    constant ap_const_lv10_B : STD_LOGIC_VECTOR (9 downto 0) := "0000001011";
    constant ap_const_lv26_3FFFE97 : STD_LOGIC_VECTOR (25 downto 0) := "11111111111111111010010111";
    constant ap_const_lv26_2B0 : STD_LOGIC_VECTOR (25 downto 0) := "00000000000000001010110000";
    constant ap_const_lv25_D2 : STD_LOGIC_VECTOR (24 downto 0) := "0000000000000000011010010";
    constant ap_const_lv26_3FFFD0E : STD_LOGIC_VECTOR (25 downto 0) := "11111111111111110100001110";
    constant ap_const_lv26_3FFFDB8 : STD_LOGIC_VECTOR (25 downto 0) := "11111111111111110110111000";
    constant ap_const_lv26_128 : STD_LOGIC_VECTOR (25 downto 0) := "00000000000000000100101000";
    constant ap_const_lv22_1A : STD_LOGIC_VECTOR (21 downto 0) := "0000000000000000011010";
    constant ap_const_lv25_A8 : STD_LOGIC_VECTOR (24 downto 0) := "0000000000000000010101000";
    constant ap_const_lv26_3FFFEDB : STD_LOGIC_VECTOR (25 downto 0) := "11111111111111111011011011";
    constant ap_const_lv16_0 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";

    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_CS_fsm : STD_LOGIC_VECTOR (2 downto 0) := "001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal icmp_ln36_fu_268_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_pp0_stage1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage1 : signal is "none";
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC;
    signal ap_phi_mux_do_init_phi_fu_191_p6 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_block_state3_pp0_stage1_iter0 : BOOLEAN;
    signal ap_block_state5_pp0_stage1_iter1 : BOOLEAN;
    signal ap_block_state7_pp0_stage1_iter2 : BOOLEAN;
    signal ap_block_pp0_stage1_11001 : BOOLEAN;
    signal data_V_blk_n : STD_LOGIC;
    signal ap_block_pp0_stage1 : BOOLEAN;
    signal do_init_reg_186 : STD_LOGIC_VECTOR (0 downto 0);
    signal data_V_load_rewind_reg_203 : STD_LOGIC_VECTOR (911 downto 0);
    signal i_part_0_i_i79_reg_218 : STD_LOGIC_VECTOR (5 downto 0);
    signal data_V_load_phi_reg_233 : STD_LOGIC_VECTOR (911 downto 0);
    signal p_05_i_idx_i78_reg_245 : STD_LOGIC_VECTOR (9 downto 0);
    signal icmp_ln36_reg_1147 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln36_reg_1147_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal i_part_fu_278_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal i_part_reg_1151 : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_block_state2_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state4_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_state6_pp0_stage0_iter2 : BOOLEAN;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal grp_fill_buffer_fu_259_ap_return : STD_LOGIC_VECTOR (15 downto 0);
    signal data_buf_V_0_0_i_reg_1156 : STD_LOGIC_VECTOR (15 downto 0);
    signal sext_ln1118_1_fu_289_p1 : STD_LOGIC_VECTOR (24 downto 0);
    signal sext_ln1118_1_reg_1165 : STD_LOGIC_VECTOR (24 downto 0);
    signal sext_ln1118_2_fu_292_p1 : STD_LOGIC_VECTOR (25 downto 0);
    signal sext_ln1118_2_reg_1170 : STD_LOGIC_VECTOR (25 downto 0);
    signal trunc_ln_reg_1176 : STD_LOGIC_VECTOR (15 downto 0);
    signal acc_0_1_V_reg_1182 : STD_LOGIC_VECTOR (15 downto 0);
    signal trunc_ln708_2_reg_1188 : STD_LOGIC_VECTOR (14 downto 0);
    signal acc_0_3_V_reg_1193 : STD_LOGIC_VECTOR (15 downto 0);
    signal acc_0_4_V_reg_1199 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln96_fu_489_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter0_reg : STD_LOGIC := '0';
    signal ap_block_pp0_stage1_subdone : BOOLEAN;
    signal ap_block_state1 : BOOLEAN;
    signal grp_fill_buffer_fu_259_ap_ce : STD_LOGIC;
    signal ap_block_state2_pp0_stage0_iter0_ignore_call23 : BOOLEAN;
    signal ap_block_state4_pp0_stage0_iter1_ignore_call23 : BOOLEAN;
    signal ap_block_state6_pp0_stage0_iter2_ignore_call23 : BOOLEAN;
    signal ap_block_pp0_stage0_11001_ignoreCallOp41 : BOOLEAN;
    signal ap_block_state3_pp0_stage1_iter0_ignore_call23 : BOOLEAN;
    signal ap_block_state5_pp0_stage1_iter1_ignore_call23 : BOOLEAN;
    signal ap_block_state7_pp0_stage1_iter2_ignore_call23 : BOOLEAN;
    signal ap_block_pp0_stage1_11001_ignoreCallOp43 : BOOLEAN;
    signal ap_phi_mux_data_V_load_rewind_phi_fu_207_p6 : STD_LOGIC_VECTOR (911 downto 0);
    signal ap_phi_mux_i_part_0_i_i79_phi_fu_222_p6 : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_phi_reg_pp0_iter0_data_V_load_phi_reg_233 : STD_LOGIC_VECTOR (911 downto 0);
    signal ap_phi_reg_pp0_iter1_data_V_load_phi_reg_233 : STD_LOGIC_VECTOR (911 downto 0);
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal res_6_V_0374_fu_100 : STD_LOGIC_VECTOR (15 downto 0);
    signal res_6_V_1_fu_741_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal res_5_V_0368_fu_104 : STD_LOGIC_VECTOR (15 downto 0);
    signal res_5_V_1_fu_725_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal res_7_V_03510_fu_108 : STD_LOGIC_VECTOR (15 downto 0);
    signal res_7_V_1_fu_709_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal res_8_V_03416_fu_112 : STD_LOGIC_VECTOR (15 downto 0);
    signal res_8_V_1_fu_693_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal res_4_V_03320_fu_116 : STD_LOGIC_VECTOR (15 downto 0);
    signal res_4_V_1_fu_677_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal res_9_V_03222_fu_120 : STD_LOGIC_VECTOR (15 downto 0);
    signal res_9_V_1_fu_662_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal res_10_V_03128_fu_124 : STD_LOGIC_VECTOR (15 downto 0);
    signal res_10_V_1_fu_522_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal res_3_V_03032_fu_128 : STD_LOGIC_VECTOR (15 downto 0);
    signal res_3_V_1_fu_646_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal res_11_V_02934_fu_132 : STD_LOGIC_VECTOR (15 downto 0);
    signal res_11_V_1_fu_562_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal res_12_V_02840_fu_136 : STD_LOGIC_VECTOR (15 downto 0);
    signal res_12_V_1_fu_631_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal res_2_V_02744_fu_140 : STD_LOGIC_VECTOR (15 downto 0);
    signal res_2_V_1_fu_623_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal res_13_V_02646_fu_144 : STD_LOGIC_VECTOR (15 downto 0);
    signal res_13_V_1_fu_608_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal res_14_V_02552_fu_148 : STD_LOGIC_VECTOR (15 downto 0);
    signal res_14_V_1_fu_601_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal res_1_V_02456_fu_152 : STD_LOGIC_VECTOR (15 downto 0);
    signal res_1_V_1_fu_554_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal res_15_V_02358_fu_156 : STD_LOGIC_VECTOR (15 downto 0);
    signal res_15_V_1_fu_593_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal res_16_V_02264_fu_160 : STD_LOGIC_VECTOR (15 downto 0);
    signal res_16_V_1_fu_585_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal res_0_V_02168_fu_164 : STD_LOGIC_VECTOR (15 downto 0);
    signal res_0_V_1_fu_514_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal res_17_V_02070_fu_168 : STD_LOGIC_VECTOR (15 downto 0);
    signal res_17_V_1_fu_577_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal res_18_V_01976_fu_172 : STD_LOGIC_VECTOR (15 downto 0);
    signal res_18_V_1_fu_569_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal data_buf_V_0_0_06281_i77_fu_176 : STD_LOGIC_VECTOR (15 downto 0);
    signal mul_ln1118_fu_962_p2 : STD_LOGIC_VECTOR (25 downto 0);
    signal mul_ln1118_1_fu_969_p2 : STD_LOGIC_VECTOR (25 downto 0);
    signal mul_ln1118_2_fu_976_p2 : STD_LOGIC_VECTOR (24 downto 0);
    signal mul_ln1118_3_fu_983_p2 : STD_LOGIC_VECTOR (25 downto 0);
    signal mul_ln1118_4_fu_990_p2 : STD_LOGIC_VECTOR (25 downto 0);
    signal mul_ln1118_5_fu_997_p2 : STD_LOGIC_VECTOR (25 downto 0);
    signal mul_ln1118_6_fu_1003_p2 : STD_LOGIC_VECTOR (21 downto 0);
    signal trunc_ln708_6_fu_412_p4 : STD_LOGIC_VECTOR (11 downto 0);
    signal mul_ln1118_7_fu_1010_p2 : STD_LOGIC_VECTOR (24 downto 0);
    signal trunc_ln708_7_fu_425_p4 : STD_LOGIC_VECTOR (14 downto 0);
    signal mul_ln1118_8_fu_1016_p2 : STD_LOGIC_VECTOR (25 downto 0);
    signal shl_ln_fu_447_p3 : STD_LOGIC_VECTOR (23 downto 0);
    signal shl_ln1118_1_fu_458_p3 : STD_LOGIC_VECTOR (16 downto 0);
    signal sext_ln1118_4_fu_465_p1 : STD_LOGIC_VECTOR (24 downto 0);
    signal sext_ln1118_3_fu_454_p1 : STD_LOGIC_VECTOR (24 downto 0);
    signal add_ln1118_fu_469_p2 : STD_LOGIC_VECTOR (24 downto 0);
    signal trunc_ln708_9_fu_475_p4 : STD_LOGIC_VECTOR (14 downto 0);
    signal icmp_ln203_2_fu_495_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln203_3_fu_501_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln203_9_fu_507_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal p_05_i_idx1_14_t_i_fu_529_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal icmp_ln203_fu_535_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln203_1_fu_548_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln203_fu_541_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal acc_0_8_V_fu_438_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal acc_0_7_V_fu_434_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal acc_0_6_V_fu_421_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal acc_0_5_V_fu_403_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal acc_0_2_V_fu_400_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal select_ln203_1_fu_615_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal select_ln203_2_fu_639_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal acc_0_9_V_fu_485_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal select_ln203_3_fu_654_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal select_ln203_4_fu_670_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal select_ln203_5_fu_685_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal select_ln203_6_fu_701_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal select_ln203_7_fu_717_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal select_ln203_8_fu_733_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal mul_ln1118_fu_962_p0 : STD_LOGIC_VECTOR (15 downto 0);
    signal mul_ln1118_fu_962_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal mul_ln1118_1_fu_969_p0 : STD_LOGIC_VECTOR (15 downto 0);
    signal mul_ln1118_1_fu_969_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal mul_ln1118_2_fu_976_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal mul_ln1118_3_fu_983_p0 : STD_LOGIC_VECTOR (15 downto 0);
    signal mul_ln1118_3_fu_983_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal mul_ln1118_4_fu_990_p0 : STD_LOGIC_VECTOR (15 downto 0);
    signal mul_ln1118_4_fu_990_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal mul_ln1118_5_fu_997_p0 : STD_LOGIC_VECTOR (15 downto 0);
    signal mul_ln1118_5_fu_997_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal mul_ln1118_6_fu_1003_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal mul_ln1118_7_fu_1010_p0 : STD_LOGIC_VECTOR (15 downto 0);
    signal mul_ln1118_7_fu_1010_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal mul_ln1118_8_fu_1016_p0 : STD_LOGIC_VECTOR (15 downto 0);
    signal mul_ln1118_8_fu_1016_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal ap_return_0_preg : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";
    signal ap_return_1_preg : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";
    signal ap_return_2_preg : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";
    signal ap_return_3_preg : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";
    signal ap_return_4_preg : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";
    signal ap_return_5_preg : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";
    signal ap_return_6_preg : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";
    signal ap_return_7_preg : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";
    signal ap_return_8_preg : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";
    signal ap_return_9_preg : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";
    signal ap_return_10_preg : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";
    signal ap_return_11_preg : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";
    signal ap_return_12_preg : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";
    signal ap_return_13_preg : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";
    signal ap_return_14_preg : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";
    signal ap_return_15_preg : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";
    signal ap_return_16_preg : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";
    signal ap_return_17_preg : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";
    signal ap_return_18_preg : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";
    signal ap_NS_fsm : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal ap_idle_pp0_0to1 : STD_LOGIC;
    signal ap_reset_idle_pp0 : STD_LOGIC;
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_enable_pp0 : STD_LOGIC;
    signal ap_condition_174 : BOOLEAN;
    signal ap_condition_52 : BOOLEAN;

    component fill_buffer IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        data_V_read : IN STD_LOGIC_VECTOR (911 downto 0);
        p_read1 : IN STD_LOGIC_VECTOR (15 downto 0);
        partition : IN STD_LOGIC_VECTOR (5 downto 0);
        ap_return : OUT STD_LOGIC_VECTOR (15 downto 0);
        ap_ce : IN STD_LOGIC );
    end component;


    component myproject_mul_mul_16s_10s_26_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (15 downto 0);
        din1 : IN STD_LOGIC_VECTOR (9 downto 0);
        dout : OUT STD_LOGIC_VECTOR (25 downto 0) );
    end component;


    component myproject_mul_mul_16s_11ns_26_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (15 downto 0);
        din1 : IN STD_LOGIC_VECTOR (10 downto 0);
        dout : OUT STD_LOGIC_VECTOR (25 downto 0) );
    end component;


    component myproject_mul_mul_16s_9ns_25_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (15 downto 0);
        din1 : IN STD_LOGIC_VECTOR (8 downto 0);
        dout : OUT STD_LOGIC_VECTOR (24 downto 0) );
    end component;


    component myproject_mul_mul_16s_11s_26_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (15 downto 0);
        din1 : IN STD_LOGIC_VECTOR (10 downto 0);
        dout : OUT STD_LOGIC_VECTOR (25 downto 0) );
    end component;


    component myproject_mul_mul_16s_10ns_26_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (15 downto 0);
        din1 : IN STD_LOGIC_VECTOR (9 downto 0);
        dout : OUT STD_LOGIC_VECTOR (25 downto 0) );
    end component;


    component myproject_mul_mul_16s_6ns_22_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (15 downto 0);
        din1 : IN STD_LOGIC_VECTOR (5 downto 0);
        dout : OUT STD_LOGIC_VECTOR (21 downto 0) );
    end component;



begin
    grp_fill_buffer_fu_259 : component fill_buffer
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        data_V_read => ap_phi_reg_pp0_iter1_data_V_load_phi_reg_233,
        p_read1 => data_buf_V_0_0_06281_i77_fu_176,
        partition => i_part_0_i_i79_reg_218,
        ap_return => grp_fill_buffer_fu_259_ap_return,
        ap_ce => grp_fill_buffer_fu_259_ap_ce);

    myproject_mul_mul_16s_10s_26_1_1_U7 : component myproject_mul_mul_16s_10s_26_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 16,
        din1_WIDTH => 10,
        dout_WIDTH => 26)
    port map (
        din0 => mul_ln1118_fu_962_p0,
        din1 => mul_ln1118_fu_962_p1,
        dout => mul_ln1118_fu_962_p2);

    myproject_mul_mul_16s_11ns_26_1_1_U8 : component myproject_mul_mul_16s_11ns_26_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 16,
        din1_WIDTH => 11,
        dout_WIDTH => 26)
    port map (
        din0 => mul_ln1118_1_fu_969_p0,
        din1 => mul_ln1118_1_fu_969_p1,
        dout => mul_ln1118_1_fu_969_p2);

    myproject_mul_mul_16s_9ns_25_1_1_U9 : component myproject_mul_mul_16s_9ns_25_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 16,
        din1_WIDTH => 9,
        dout_WIDTH => 25)
    port map (
        din0 => data_buf_V_0_0_i_reg_1156,
        din1 => mul_ln1118_2_fu_976_p1,
        dout => mul_ln1118_2_fu_976_p2);

    myproject_mul_mul_16s_11s_26_1_1_U10 : component myproject_mul_mul_16s_11s_26_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 16,
        din1_WIDTH => 11,
        dout_WIDTH => 26)
    port map (
        din0 => mul_ln1118_3_fu_983_p0,
        din1 => mul_ln1118_3_fu_983_p1,
        dout => mul_ln1118_3_fu_983_p2);

    myproject_mul_mul_16s_11s_26_1_1_U11 : component myproject_mul_mul_16s_11s_26_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 16,
        din1_WIDTH => 11,
        dout_WIDTH => 26)
    port map (
        din0 => mul_ln1118_4_fu_990_p0,
        din1 => mul_ln1118_4_fu_990_p1,
        dout => mul_ln1118_4_fu_990_p2);

    myproject_mul_mul_16s_10ns_26_1_1_U12 : component myproject_mul_mul_16s_10ns_26_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 16,
        din1_WIDTH => 10,
        dout_WIDTH => 26)
    port map (
        din0 => mul_ln1118_5_fu_997_p0,
        din1 => mul_ln1118_5_fu_997_p1,
        dout => mul_ln1118_5_fu_997_p2);

    myproject_mul_mul_16s_6ns_22_1_1_U13 : component myproject_mul_mul_16s_6ns_22_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 16,
        din1_WIDTH => 6,
        dout_WIDTH => 22)
    port map (
        din0 => data_buf_V_0_0_i_reg_1156,
        din1 => mul_ln1118_6_fu_1003_p1,
        dout => mul_ln1118_6_fu_1003_p2);

    myproject_mul_mul_16s_9ns_25_1_1_U14 : component myproject_mul_mul_16s_9ns_25_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 16,
        din1_WIDTH => 9,
        dout_WIDTH => 25)
    port map (
        din0 => mul_ln1118_7_fu_1010_p0,
        din1 => mul_ln1118_7_fu_1010_p1,
        dout => mul_ln1118_7_fu_1010_p2);

    myproject_mul_mul_16s_10s_26_1_1_U15 : component myproject_mul_mul_16s_10s_26_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 16,
        din1_WIDTH => 10,
        dout_WIDTH => 26)
    port map (
        din0 => mul_ln1118_8_fu_1016_p0,
        din1 => mul_ln1118_8_fu_1016_p1,
        dout => mul_ln1118_8_fu_1016_p2);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (icmp_ln36_reg_1147_pp0_iter1_reg = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter0_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter0_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) then 
                    ap_enable_reg_pp0_iter0_reg <= ap_start;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_subdone))) then 
                    ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_subdone))) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                elsif ((not(((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                    ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ap_return_0_preg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_return_0_preg <= ap_const_lv16_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (icmp_ln36_reg_1147_pp0_iter1_reg = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
                    ap_return_0_preg <= res_0_V_1_fu_514_p3;
                end if; 
            end if;
        end if;
    end process;


    ap_return_10_preg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_return_10_preg <= ap_const_lv16_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (icmp_ln36_reg_1147_pp0_iter1_reg = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
                    ap_return_10_preg <= res_10_V_1_fu_522_p3;
                end if; 
            end if;
        end if;
    end process;


    ap_return_11_preg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_return_11_preg <= ap_const_lv16_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (icmp_ln36_reg_1147_pp0_iter1_reg = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
                    ap_return_11_preg <= res_11_V_1_fu_562_p3;
                end if; 
            end if;
        end if;
    end process;


    ap_return_12_preg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_return_12_preg <= ap_const_lv16_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (icmp_ln36_reg_1147_pp0_iter1_reg = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
                    ap_return_12_preg <= res_12_V_1_fu_631_p3;
                end if; 
            end if;
        end if;
    end process;


    ap_return_13_preg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_return_13_preg <= ap_const_lv16_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (icmp_ln36_reg_1147_pp0_iter1_reg = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
                    ap_return_13_preg <= res_13_V_1_fu_608_p3;
                end if; 
            end if;
        end if;
    end process;


    ap_return_14_preg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_return_14_preg <= ap_const_lv16_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (icmp_ln36_reg_1147_pp0_iter1_reg = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
                    ap_return_14_preg <= res_14_V_1_fu_601_p3;
                end if; 
            end if;
        end if;
    end process;


    ap_return_15_preg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_return_15_preg <= ap_const_lv16_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (icmp_ln36_reg_1147_pp0_iter1_reg = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
                    ap_return_15_preg <= res_15_V_1_fu_593_p3;
                end if; 
            end if;
        end if;
    end process;


    ap_return_16_preg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_return_16_preg <= ap_const_lv16_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (icmp_ln36_reg_1147_pp0_iter1_reg = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
                    ap_return_16_preg <= res_16_V_1_fu_585_p3;
                end if; 
            end if;
        end if;
    end process;


    ap_return_17_preg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_return_17_preg <= ap_const_lv16_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (icmp_ln36_reg_1147_pp0_iter1_reg = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
                    ap_return_17_preg <= res_17_V_1_fu_577_p3;
                end if; 
            end if;
        end if;
    end process;


    ap_return_18_preg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_return_18_preg <= ap_const_lv16_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (icmp_ln36_reg_1147_pp0_iter1_reg = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
                    ap_return_18_preg <= res_18_V_1_fu_569_p3;
                end if; 
            end if;
        end if;
    end process;


    ap_return_1_preg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_return_1_preg <= ap_const_lv16_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (icmp_ln36_reg_1147_pp0_iter1_reg = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
                    ap_return_1_preg <= res_1_V_1_fu_554_p3;
                end if; 
            end if;
        end if;
    end process;


    ap_return_2_preg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_return_2_preg <= ap_const_lv16_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (icmp_ln36_reg_1147_pp0_iter1_reg = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
                    ap_return_2_preg <= res_2_V_1_fu_623_p3;
                end if; 
            end if;
        end if;
    end process;


    ap_return_3_preg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_return_3_preg <= ap_const_lv16_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (icmp_ln36_reg_1147_pp0_iter1_reg = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
                    ap_return_3_preg <= res_3_V_1_fu_646_p3;
                end if; 
            end if;
        end if;
    end process;


    ap_return_4_preg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_return_4_preg <= ap_const_lv16_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (icmp_ln36_reg_1147_pp0_iter1_reg = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
                    ap_return_4_preg <= res_4_V_1_fu_677_p3;
                end if; 
            end if;
        end if;
    end process;


    ap_return_5_preg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_return_5_preg <= ap_const_lv16_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (icmp_ln36_reg_1147_pp0_iter1_reg = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
                    ap_return_5_preg <= res_5_V_1_fu_725_p3;
                end if; 
            end if;
        end if;
    end process;


    ap_return_6_preg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_return_6_preg <= ap_const_lv16_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (icmp_ln36_reg_1147_pp0_iter1_reg = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
                    ap_return_6_preg <= res_6_V_1_fu_741_p3;
                end if; 
            end if;
        end if;
    end process;


    ap_return_7_preg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_return_7_preg <= ap_const_lv16_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (icmp_ln36_reg_1147_pp0_iter1_reg = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
                    ap_return_7_preg <= res_7_V_1_fu_709_p3;
                end if; 
            end if;
        end if;
    end process;


    ap_return_8_preg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_return_8_preg <= ap_const_lv16_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (icmp_ln36_reg_1147_pp0_iter1_reg = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
                    ap_return_8_preg <= res_8_V_1_fu_693_p3;
                end if; 
            end if;
        end if;
    end process;


    ap_return_9_preg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_return_9_preg <= ap_const_lv16_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (icmp_ln36_reg_1147_pp0_iter1_reg = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
                    ap_return_9_preg <= res_9_V_1_fu_662_p3;
                end if; 
            end if;
        end if;
    end process;


    ap_phi_reg_pp0_iter1_data_V_load_phi_reg_233_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_1 = ap_condition_52)) then
                if ((ap_phi_mux_do_init_phi_fu_191_p6 = ap_const_lv1_0)) then 
                    ap_phi_reg_pp0_iter1_data_V_load_phi_reg_233 <= ap_phi_mux_data_V_load_rewind_phi_fu_207_p6;
                elsif ((ap_phi_mux_do_init_phi_fu_191_p6 = ap_const_lv1_1)) then 
                    ap_phi_reg_pp0_iter1_data_V_load_phi_reg_233 <= data_V_dout;
                elsif ((ap_const_boolean_1 = ap_const_boolean_1)) then 
                    ap_phi_reg_pp0_iter1_data_V_load_phi_reg_233 <= ap_phi_reg_pp0_iter0_data_V_load_phi_reg_233;
                end if;
            end if; 
        end if;
    end process;

    do_init_reg_186_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln36_reg_1147 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then 
                do_init_reg_186 <= ap_const_lv1_0;
            elsif ((((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (icmp_ln36_reg_1147 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1)) or (not(((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
                do_init_reg_186 <= ap_const_lv1_1;
            end if; 
        end if;
    end process;

    i_part_0_i_i79_reg_218_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln36_reg_1147 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then 
                i_part_0_i_i79_reg_218 <= i_part_reg_1151;
            elsif ((((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (icmp_ln36_reg_1147 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1)) or (not(((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
                i_part_0_i_i79_reg_218 <= ap_const_lv6_0;
            end if; 
        end if;
    end process;

    p_05_i_idx_i78_reg_245_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln36_reg_1147_pp0_iter1_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
                p_05_i_idx_i78_reg_245 <= add_ln96_fu_489_p2;
            elsif ((((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (icmp_ln36_reg_1147_pp0_iter1_reg = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1)) or (not(((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
                p_05_i_idx_i78_reg_245 <= ap_const_lv10_0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                acc_0_1_V_reg_1182 <= mul_ln1118_1_fu_969_p2(25 downto 10);
                acc_0_3_V_reg_1193 <= mul_ln1118_3_fu_983_p2(25 downto 10);
                acc_0_4_V_reg_1199 <= mul_ln1118_4_fu_990_p2(25 downto 10);
                sext_ln1118_1_reg_1165 <= sext_ln1118_1_fu_289_p1;
                sext_ln1118_2_reg_1170 <= sext_ln1118_2_fu_292_p1;
                trunc_ln708_2_reg_1188 <= mul_ln1118_2_fu_976_p2(24 downto 10);
                trunc_ln_reg_1176 <= mul_ln1118_fu_962_p2(25 downto 10);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                data_V_load_phi_reg_233 <= ap_phi_reg_pp0_iter1_data_V_load_phi_reg_233;
                i_part_reg_1151 <= i_part_fu_278_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln36_reg_1147 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then
                data_V_load_rewind_reg_203 <= data_V_load_phi_reg_233;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then
                data_buf_V_0_0_06281_i77_fu_176 <= grp_fill_buffer_fu_259_ap_return;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then
                data_buf_V_0_0_i_reg_1156 <= grp_fill_buffer_fu_259_ap_return;
                icmp_ln36_reg_1147 <= icmp_ln36_fu_268_p2;
                icmp_ln36_reg_1147_pp0_iter1_reg <= icmp_ln36_reg_1147;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then
                res_0_V_02168_fu_164 <= res_0_V_1_fu_514_p3;
                res_10_V_03128_fu_124 <= res_10_V_1_fu_522_p3;
                res_11_V_02934_fu_132 <= res_11_V_1_fu_562_p3;
                res_12_V_02840_fu_136 <= res_12_V_1_fu_631_p3;
                res_13_V_02646_fu_144 <= res_13_V_1_fu_608_p3;
                res_14_V_02552_fu_148 <= res_14_V_1_fu_601_p3;
                res_15_V_02358_fu_156 <= res_15_V_1_fu_593_p3;
                res_16_V_02264_fu_160 <= res_16_V_1_fu_585_p3;
                res_17_V_02070_fu_168 <= res_17_V_1_fu_577_p3;
                res_18_V_01976_fu_172 <= res_18_V_1_fu_569_p3;
                res_1_V_02456_fu_152 <= res_1_V_1_fu_554_p3;
                res_2_V_02744_fu_140 <= res_2_V_1_fu_623_p3;
                res_3_V_03032_fu_128 <= res_3_V_1_fu_646_p3;
                res_4_V_03320_fu_116 <= res_4_V_1_fu_677_p3;
                res_5_V_0368_fu_104 <= res_5_V_1_fu_725_p3;
                res_6_V_0374_fu_100 <= res_6_V_1_fu_741_p3;
                res_7_V_03510_fu_108 <= res_7_V_1_fu_709_p3;
                res_8_V_03416_fu_112 <= res_8_V_1_fu_693_p3;
                res_9_V_03222_fu_120 <= res_9_V_1_fu_662_p3;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_start, ap_done_reg, ap_CS_fsm, ap_CS_fsm_state1, ap_block_pp0_stage1_subdone, ap_block_pp0_stage0_subdone, ap_reset_idle_pp0)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if ((not(((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_pp0_stage0 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage1;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                end if;
            when ap_ST_fsm_pp0_stage1 => 
                if (((ap_reset_idle_pp0 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp0_stage1_subdone))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                elsif (((ap_reset_idle_pp0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage1_subdone))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage1;
                end if;
            when others =>  
                ap_NS_fsm <= "XXX";
        end case;
    end process;
        acc_0_2_V_fu_400_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(trunc_ln708_2_reg_1188),16));

    acc_0_5_V_fu_403_p4 <= mul_ln1118_5_fu_997_p2(25 downto 10);
        acc_0_6_V_fu_421_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(trunc_ln708_6_fu_412_p4),16));

        acc_0_7_V_fu_434_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(trunc_ln708_7_fu_425_p4),16));

    acc_0_8_V_fu_438_p4 <= mul_ln1118_8_fu_1016_p2(25 downto 10);
        acc_0_9_V_fu_485_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(trunc_ln708_9_fu_475_p4),16));

    add_ln1118_fu_469_p2 <= std_logic_vector(signed(sext_ln1118_4_fu_465_p1) + signed(sext_ln1118_3_fu_454_p1));
    add_ln96_fu_489_p2 <= std_logic_vector(unsigned(p_05_i_idx_i78_reg_245) + unsigned(ap_const_lv10_A));
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(1);
    ap_CS_fsm_pp0_stage1 <= ap_CS_fsm(2);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage0_11001_assign_proc : process(ap_done_reg)
    begin
                ap_block_pp0_stage0_11001 <= (ap_done_reg = ap_const_logic_1);
    end process;


    ap_block_pp0_stage0_11001_ignoreCallOp41_assign_proc : process(ap_done_reg)
    begin
                ap_block_pp0_stage0_11001_ignoreCallOp41 <= (ap_done_reg = ap_const_logic_1);
    end process;


    ap_block_pp0_stage0_subdone_assign_proc : process(ap_done_reg)
    begin
                ap_block_pp0_stage0_subdone <= (ap_done_reg = ap_const_logic_1);
    end process;

        ap_block_pp0_stage1 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage1_11001_assign_proc : process(ap_enable_reg_pp0_iter0, data_V_empty_n, ap_phi_mux_do_init_phi_fu_191_p6)
    begin
                ap_block_pp0_stage1_11001 <= ((data_V_empty_n = ap_const_logic_0) and (ap_phi_mux_do_init_phi_fu_191_p6 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1));
    end process;


    ap_block_pp0_stage1_11001_ignoreCallOp43_assign_proc : process(ap_enable_reg_pp0_iter0, data_V_empty_n, ap_phi_mux_do_init_phi_fu_191_p6)
    begin
                ap_block_pp0_stage1_11001_ignoreCallOp43 <= ((data_V_empty_n = ap_const_logic_0) and (ap_phi_mux_do_init_phi_fu_191_p6 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1));
    end process;


    ap_block_pp0_stage1_subdone_assign_proc : process(ap_enable_reg_pp0_iter0, data_V_empty_n, ap_phi_mux_do_init_phi_fu_191_p6)
    begin
                ap_block_pp0_stage1_subdone <= ((data_V_empty_n = ap_const_logic_0) and (ap_phi_mux_do_init_phi_fu_191_p6 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1));
    end process;


    ap_block_state1_assign_proc : process(ap_start, ap_done_reg)
    begin
                ap_block_state1 <= ((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1));
    end process;

        ap_block_state2_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state2_pp0_stage0_iter0_ignore_call23 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state3_pp0_stage1_iter0_assign_proc : process(data_V_empty_n, ap_phi_mux_do_init_phi_fu_191_p6)
    begin
                ap_block_state3_pp0_stage1_iter0 <= ((data_V_empty_n = ap_const_logic_0) and (ap_phi_mux_do_init_phi_fu_191_p6 = ap_const_lv1_1));
    end process;


    ap_block_state3_pp0_stage1_iter0_ignore_call23_assign_proc : process(data_V_empty_n, ap_phi_mux_do_init_phi_fu_191_p6)
    begin
                ap_block_state3_pp0_stage1_iter0_ignore_call23 <= ((data_V_empty_n = ap_const_logic_0) and (ap_phi_mux_do_init_phi_fu_191_p6 = ap_const_lv1_1));
    end process;

        ap_block_state4_pp0_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state4_pp0_stage0_iter1_ignore_call23 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state5_pp0_stage1_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state5_pp0_stage1_iter1_ignore_call23 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state6_pp0_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state6_pp0_stage0_iter2_ignore_call23 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state7_pp0_stage1_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state7_pp0_stage1_iter2_ignore_call23 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_condition_174_assign_proc : process(ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1, ap_enable_reg_pp0_iter1)
    begin
                ap_condition_174 <= ((ap_const_boolean_0 = ap_block_pp0_stage1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1));
    end process;


    ap_condition_52_assign_proc : process(ap_CS_fsm_pp0_stage1, ap_enable_reg_pp0_iter0, ap_block_pp0_stage1_11001)
    begin
                ap_condition_52 <= ((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1));
    end process;


    ap_done_assign_proc : process(ap_done_reg, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_11001, icmp_ln36_reg_1147_pp0_iter1_reg, ap_enable_reg_pp0_iter2)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (icmp_ln36_reg_1147_pp0_iter1_reg = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_done_reg;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);

    ap_enable_reg_pp0_iter0_assign_proc : process(ap_start, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0_reg)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) then 
            ap_enable_reg_pp0_iter0 <= ap_start;
        else 
            ap_enable_reg_pp0_iter0 <= ap_enable_reg_pp0_iter0_reg;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2)
    begin
        if (((ap_enable_reg_pp0_iter0 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_0to1_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1)
    begin
        if (((ap_enable_reg_pp0_iter0 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0))) then 
            ap_idle_pp0_0to1 <= ap_const_logic_1;
        else 
            ap_idle_pp0_0to1 <= ap_const_logic_0;
        end if; 
    end process;


    ap_phi_mux_data_V_load_rewind_phi_fu_207_p6_assign_proc : process(ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1, data_V_load_rewind_reg_203, data_V_load_phi_reg_233, icmp_ln36_reg_1147, ap_enable_reg_pp0_iter1)
    begin
        if (((icmp_ln36_reg_1147 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then 
            ap_phi_mux_data_V_load_rewind_phi_fu_207_p6 <= data_V_load_phi_reg_233;
        else 
            ap_phi_mux_data_V_load_rewind_phi_fu_207_p6 <= data_V_load_rewind_reg_203;
        end if; 
    end process;


    ap_phi_mux_do_init_phi_fu_191_p6_assign_proc : process(do_init_reg_186, icmp_ln36_reg_1147, ap_condition_174)
    begin
        if ((ap_const_boolean_1 = ap_condition_174)) then
            if ((icmp_ln36_reg_1147 = ap_const_lv1_1)) then 
                ap_phi_mux_do_init_phi_fu_191_p6 <= ap_const_lv1_1;
            elsif ((icmp_ln36_reg_1147 = ap_const_lv1_0)) then 
                ap_phi_mux_do_init_phi_fu_191_p6 <= ap_const_lv1_0;
            else 
                ap_phi_mux_do_init_phi_fu_191_p6 <= do_init_reg_186;
            end if;
        else 
            ap_phi_mux_do_init_phi_fu_191_p6 <= do_init_reg_186;
        end if; 
    end process;


    ap_phi_mux_i_part_0_i_i79_phi_fu_222_p6_assign_proc : process(i_part_0_i_i79_reg_218, icmp_ln36_reg_1147, i_part_reg_1151, ap_condition_174)
    begin
        if ((ap_const_boolean_1 = ap_condition_174)) then
            if ((icmp_ln36_reg_1147 = ap_const_lv1_1)) then 
                ap_phi_mux_i_part_0_i_i79_phi_fu_222_p6 <= ap_const_lv6_0;
            elsif ((icmp_ln36_reg_1147 = ap_const_lv1_0)) then 
                ap_phi_mux_i_part_0_i_i79_phi_fu_222_p6 <= i_part_reg_1151;
            else 
                ap_phi_mux_i_part_0_i_i79_phi_fu_222_p6 <= i_part_0_i_i79_reg_218;
            end if;
        else 
            ap_phi_mux_i_part_0_i_i79_phi_fu_222_p6 <= i_part_0_i_i79_reg_218;
        end if; 
    end process;

    ap_phi_reg_pp0_iter0_data_V_load_phi_reg

    ap_ready_assign_proc : process(icmp_ln36_fu_268_p2, ap_CS_fsm_pp0_stage1, ap_enable_reg_pp0_iter0, ap_block_pp0_stage1_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (icmp_ln36_fu_268_p2 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    ap_reset_idle_pp0_assign_proc : process(ap_start, ap_idle_pp0_0to1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_idle_pp0_0to1 = ap_const_logic_1))) then 
            ap_reset_idle_pp0 <= ap_const_logic_1;
        else 
            ap_reset_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_return_0_assign_proc : process(ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_11001, icmp_ln36_reg_1147_pp0_iter1_reg, ap_enable_reg_pp0_iter2, res_0_V_1_fu_514_p3, ap_return_0_preg)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (icmp_ln36_reg_1147_pp0_iter1_reg = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
            ap_return_0 <= res_0_V_1_fu_514_p3;
        else 
            ap_return_0 <= ap_return_0_preg;
        end if; 
    end process;


    ap_return_1_assign_proc : process(ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_11001, icmp_ln36_reg_1147_pp0_iter1_reg, ap_enable_reg_pp0_iter2, res_1_V_1_fu_554_p3, ap_return_1_preg)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (icmp_ln36_reg_1147_pp0_iter1_reg = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
            ap_return_1 <= res_1_V_1_fu_554_p3;
        else 
            ap_return_1 <= ap_return_1_preg;
        end if; 
    end process;


    ap_return_10_assign_proc : process(ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_11001, icmp_ln36_reg_1147_pp0_iter1_reg, ap_enable_reg_pp0_iter2, res_10_V_1_fu_522_p3, ap_return_10_preg)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (icmp_ln36_reg_1147_pp0_iter1_reg = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
            ap_return_10 <= res_10_V_1_fu_522_p3;
        else 
            ap_return_10 <= ap_return_10_preg;
        end if; 
    end process;


    ap_return_11_assign_proc : process(ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_11001, icmp_ln36_reg_1147_pp0_iter1_reg, ap_enable_reg_pp0_iter2, res_11_V_1_fu_562_p3, ap_return_11_preg)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (icmp_ln36_reg_1147_pp0_iter1_reg = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
            ap_return_11 <= res_11_V_1_fu_562_p3;
        else 
            ap_return_11 <= ap_return_11_preg;
        end if; 
    end process;


    ap_return_12_assign_proc : process(ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_11001, icmp_ln36_reg_1147_pp0_iter1_reg, ap_enable_reg_pp0_iter2, res_12_V_1_fu_631_p3, ap_return_12_preg)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (icmp_ln36_reg_1147_pp0_iter1_reg = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
            ap_return_12 <= res_12_V_1_fu_631_p3;
        else 
            ap_return_12 <= ap_return_12_preg;
        end if; 
    end process;


    ap_return_13_assign_proc : process(ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_11001, icmp_ln36_reg_1147_pp0_iter1_reg, ap_enable_reg_pp0_iter2, res_13_V_1_fu_608_p3, ap_return_13_preg)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (icmp_ln36_reg_1147_pp0_iter1_reg = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
            ap_return_13 <= res_13_V_1_fu_608_p3;
        else 
            ap_return_13 <= ap_return_13_preg;
        end if; 
    end process;


    ap_return_14_assign_proc : process(ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_11001, icmp_ln36_reg_1147_pp0_iter1_reg, ap_enable_reg_pp0_iter2, res_14_V_1_fu_601_p3, ap_return_14_preg)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (icmp_ln36_reg_1147_pp0_iter1_reg = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
            ap_return_14 <= res_14_V_1_fu_601_p3;
        else 
            ap_return_14 <= ap_return_14_preg;
        end if; 
    end process;


    ap_return_15_assign_proc : process(ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_11001, icmp_ln36_reg_1147_pp0_iter1_reg, ap_enable_reg_pp0_iter2, res_15_V_1_fu_593_p3, ap_return_15_preg)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (icmp_ln36_reg_1147_pp0_iter1_reg = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
            ap_return_15 <= res_15_V_1_fu_593_p3;
        else 
            ap_return_15 <= ap_return_15_preg;
        end if; 
    end process;


    ap_return_16_assign_proc : process(ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_11001, icmp_ln36_reg_1147_pp0_iter1_reg, ap_enable_reg_pp0_iter2, res_16_V_1_fu_585_p3, ap_return_16_preg)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (icmp_ln36_reg_1147_pp0_iter1_reg = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
            ap_return_16 <= res_16_V_1_fu_585_p3;
        else 
            ap_return_16 <= ap_return_16_preg;
        end if; 
    end process;


    ap_return_17_assign_proc : process(ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_11001, icmp_ln36_reg_1147_pp0_iter1_reg, ap_enable_reg_pp0_iter2, res_17_V_1_fu_577_p3, ap_return_17_preg)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (icmp_ln36_reg_1147_pp0_iter1_reg = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
            ap_return_17 <= res_17_V_1_fu_577_p3;
        else 
            ap_return_17 <= ap_return_17_preg;
        end if; 
    end process;


    ap_return_18_assign_proc : process(ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_11001, icmp_ln36_reg_1147_pp0_iter1_reg, ap_enable_reg_pp0_iter2, res_18_V_1_fu_569_p3, ap_return_18_preg)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (icmp_ln36_reg_1147_pp0_iter1_reg = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
            ap_return_18 <= res_18_V_1_fu_569_p3;
        else 
            ap_return_18 <= ap_return_18_preg;
        end if; 
    end process;


    ap_return_2_assign_proc : process(ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_11001, icmp_ln36_reg_1147_pp0_iter1_reg, ap_enable_reg_pp0_iter2, res_2_V_1_fu_623_p3, ap_return_2_preg)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (icmp_ln36_reg_1147_pp0_iter1_reg = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
            ap_return_2 <= res_2_V_1_fu_623_p3;
        else 
            ap_return_2 <= ap_return_2_preg;
        end if; 
    end process;


    ap_return_3_assign_proc : process(ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_11001, icmp_ln36_reg_1147_pp0_iter1_reg, ap_enable_reg_pp0_iter2, res_3_V_1_fu_646_p3, ap_return_3_preg)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (icmp_ln36_reg_1147_pp0_iter1_reg = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
            ap_return_3 <= res_3_V_1_fu_646_p3;
        else 
            ap_return_3 <= ap_return_3_preg;
        end if; 
    end process;


    ap_return_4_assign_proc : process(ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_11001, icmp_ln36_reg_1147_pp0_iter1_reg, ap_enable_reg_pp0_iter2, res_4_V_1_fu_677_p3, ap_return_4_preg)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (icmp_ln36_reg_1147_pp0_iter1_reg = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
            ap_return_4 <= res_4_V_1_fu_677_p3;
        else 
            ap_return_4 <= ap_return_4_preg;
        end if; 
    end process;


    ap_return_5_assign_proc : process(ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_11001, icmp_ln36_reg_1147_pp0_iter1_reg, ap_enable_reg_pp0_iter2, res_5_V_1_fu_725_p3, ap_return_5_preg)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (icmp_ln36_reg_1147_pp0_iter1_reg = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
            ap_return_5 <= res_5_V_1_fu_725_p3;
        else 
            ap_return_5 <= ap_return_5_preg;
        end if; 
    end process;


    ap_return_6_assign_proc : process(ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_11001, icmp_ln36_reg_1147_pp0_iter1_reg, ap_enable_reg_pp0_iter2, res_6_V_1_fu_741_p3, ap_return_6_preg)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (icmp_ln36_reg_1147_pp0_iter1_reg = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
            ap_return_6 <= res_6_V_1_fu_741_p3;
        else 
            ap_return_6 <= ap_return_6_preg;
        end if; 
    end process;


    ap_return_7_assign_proc : process(ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_11001, icmp_ln36_reg_1147_pp0_iter1_reg, ap_enable_reg_pp0_iter2, res_7_V_1_fu_709_p3, ap_return_7_preg)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (icmp_ln36_reg_1147_pp0_iter1_reg = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
            ap_return_7 <= res_7_V_1_fu_709_p3;
        else 
            ap_return_7 <= ap_return_7_preg;
        end if; 
    end process;


    ap_return_8_assign_proc : process(ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_11001, icmp_ln36_reg_1147_pp0_iter1_reg, ap_enable_reg_pp0_iter2, res_8_V_1_fu_693_p3, ap_return_8_preg)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (icmp_ln36_reg_1147_pp0_iter1_reg = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
            ap_return_8 <= res_8_V_1_fu_693_p3;
        else 
            ap_return_8 <= ap_return_8_preg;
        end if; 
    end process;


    ap_return_9_assign_proc : process(ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_11001, icmp_ln36_reg_1147_pp0_iter1_reg, ap_enable_reg_pp0_iter2, res_9_V_1_fu_662_p3, ap_return_9_preg)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (icmp_ln36_reg_1147_pp0_iter1_reg = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
            ap_return_9 <= res_9_V_1_fu_662_p3;
        else 
            ap_return_9 <= ap_return_9_preg;
        end if; 
    end process;


    data_V_blk_n_assign_proc : process(ap_CS_fsm_pp0_stage1, ap_enable_reg_pp0_iter0, data_V_empty_n, ap_phi_mux_do_init_phi_fu_191_p6, ap_block_pp0_stage1)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage1) and (ap_phi_mux_do_init_phi_fu_191_p6 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
            data_V_blk_n <= data_V_empty_n;
        else 
            data_V_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    data_V_read_assign_proc : process(ap_CS_fsm_pp0_stage1, ap_enable_reg_pp0_iter0, ap_phi_mux_do_init_phi_fu_191_p6, ap_block_pp0_stage1_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_phi_mux_do_init_phi_fu_191_p6 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
            data_V_read <= ap_const_logic_1;
        else 
            data_V_read <= ap_const_logic_0;
        end if; 
    end process;


    grp_fill_buffer_fu_259_ap_ce_assign_proc : process(ap_CS_fsm_pp0_stage1, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001_ignoreCallOp41, ap_block_pp0_stage1_11001_ignoreCallOp43)
    begin
        if ((((ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001_ignoreCallOp43)) or ((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001_ignoreCallOp41)))) then 
            grp_fill_buffer_fu_259_ap_ce <= ap_const_logic_1;
        else 
            grp_fill_buffer_fu_259_ap_ce <= ap_const_logic_0;
        end if; 
    end process;

    i_part_fu_278_p2 <= std_logic_vector(unsigned(i_part_0_i_i79_reg_218) + unsigned(ap_const_lv6_1));
    icmp_ln203_1_fu_548_p2 <= "1" when (p_05_i_idx1_14_t_i_fu_529_p2 = ap_const_lv10_B) else "0";
    icmp_ln203_2_fu_495_p2 <= "1" when (p_05_i_idx_i78_reg_245 = ap_const_lv10_0) else "0";
    icmp_ln203_3_fu_501_p2 <= "1" when (p_05_i_idx_i78_reg_245 = ap_const_lv10_A) else "0";
    icmp_ln203_fu_535_p2 <= "1" when (p_05_i_idx1_14_t_i_fu_529_p2 = ap_const_lv10_1) else "0";
    icmp_ln36_fu_268_p2 <= "1" when (ap_phi_mux_i_part_0_i_i79_phi_fu_222_p6 = ap_const_lv6_38) else "0";
    mul_ln1118_1_fu_969_p0 <= sext_ln1118_2_fu_292_p1(16 - 1 downto 0);
    mul_ln1118_1_fu_969_p1 <= ap_const_lv26_2B0(11 - 1 downto 0);
    mul_ln1118_2_fu_976_p1 <= ap_const_lv25_D2(9 - 1 downto 0);
    mul_ln1118_3_fu_983_p0 <= sext_ln1118_2_fu_292_p1(16 - 1 downto 0);
    mul_ln1118_3_fu_983_p1 <= ap_const_lv26_3FFFD0E(11 - 1 downto 0);
    mul_ln1118_4_fu_990_p0 <= sext_ln1118_2_fu_292_p1(16 - 1 downto 0);
    mul_ln1118_4_fu_990_p1 <= ap_const_lv26_3FFFDB8(11 - 1 downto 0);
    mul_ln1118_5_fu_997_p0 <= sext_ln1118_2_reg_1170(16 - 1 downto 0);
    mul_ln1118_5_fu_997_p1 <= ap_const_lv26_128(10 - 1 downto 0);
    mul_ln1118_6_fu_1003_p1 <= ap_const_lv22_1A(6 - 1 downto 0);
    mul_ln1118_7_fu_1010_p0 <= sext_ln1118_1_reg_1165(16 - 1 downto 0);
    mul_ln1118_7_fu_1010_p1 <= ap_const_lv25_A8(9 - 1 downto 0);
    mul_ln1118_8_fu_1016_p0 <= sext_ln1118_2_reg_1170(16 - 1 downto 0);
    mul_ln1118_8_fu_1016_p1 <= ap_const_lv26_3FFFEDB(10 - 1 downto 0);
    mul_ln1118_fu_962_p0 <= sext_ln1118_2_fu_292_p1(16 - 1 downto 0);
    mul_ln1118_fu_962_p1 <= ap_const_lv26_3FFFE97(10 - 1 downto 0);
    p_05_i_idx1_14_t_i_fu_529_p2 <= (p_05_i_idx_i78_reg_245 or ap_const_lv10_1);
    res_0_V_1_fu_514_p3 <= 
        res_0_V_02168_fu_164 when (icmp_ln203_3_fu_501_p2(0) = '1') else 
        select_ln203_9_fu_507_p3;
    res_10_V_1_fu_522_p3 <= 
        trunc_ln_reg_1176 when (icmp_ln203_3_fu_501_p2(0) = '1') else 
        res_10_V_03128_fu_124;
    res_11_V_1_fu_562_p3 <= 
        acc_0_1_V_reg_1182 when (icmp_ln203_1_fu_548_p2(0) = '1') else 
        res_11_V_02934_fu_132;
    res_12_V_1_fu_631_p3 <= 
        acc_0_2_V_fu_400_p1 when (icmp_ln203_3_fu_501_p2(0) = '1') else 
        res_12_V_02840_fu_136;
    res_13_V_1_fu_608_p3 <= 
        acc_0_3_V_reg_1193 when (icmp_ln203_3_fu_501_p2(0) = '1') else 
        res_13_V_02646_fu_144;
    res_14_V_1_fu_601_p3 <= 
        acc_0_4_V_reg_1199 when (icmp_ln203_3_fu_501_p2(0) = '1') else 
        res_14_V_02552_fu_148;
    res_15_V_1_fu_593_p3 <= 
        acc_0_5_V_fu_403_p4 when (icmp_ln203_3_fu_501_p2(0) = '1') else 
        res_15_V_02358_fu_156;
    res_16_V_1_fu_585_p3 <= 
        acc_0_6_V_fu_421_p1 when (icmp_ln203_3_fu_501_p2(0) = '1') else 
        res_16_V_02264_fu_160;
    res_17_V_1_fu_577_p3 <= 
        acc_0_7_V_fu_434_p1 when (icmp_ln203_3_fu_501_p2(0) = '1') else 
        res_17_V_02070_fu_168;
    res_18_V_1_fu_569_p3 <= 
        acc_0_8_V_fu_438_p4 when (icmp_ln203_3_fu_501_p2(0) = '1') else 
        res_18_V_01976_fu_172;
    res_1_V_1_fu_554_p3 <= 
        res_1_V_02456_fu_152 when (icmp_ln203_1_fu_548_p2(0) = '1') else 
        select_ln203_fu_541_p3;
    res_2_V_1_fu_623_p3 <= 
        res_2_V_02744_fu_140 when (icmp_ln203_3_fu_501_p2(0) = '1') else 
        select_ln203_1_fu_615_p3;
    res_3_V_1_fu_646_p3 <= 
        res_3_V_03032_fu_128 when (icmp_ln203_3_fu_501_p2(0) = '1') else 
        select_ln203_2_fu_639_p3;
    res_4_V_1_fu_677_p3 <= 
        res_4_V_03320_fu_116 when (icmp_ln203_3_fu_501_p2(0) = '1') else 
        select_ln203_4_fu_670_p3;
    res_5_V_1_fu_725_p3 <= 
        res_5_V_0368_fu_104 when (icmp_ln203_3_fu_501_p2(0) = '1') else 
        select_ln203_7_fu_717_p3;
    res_6_V_1_fu_741_p3 <= 
        res_6_V_0374_fu_100 when (icmp_ln203_3_fu_501_p2(0) = '1') else 
        select_ln203_8_fu_733_p3;
    res_7_V_1_fu_709_p3 <= 
        res_7_V_03510_fu_108 when (icmp_ln203_3_fu_501_p2(0) = '1') else 
        select_ln203_6_fu_701_p3;
    res_8_V_1_fu_693_p3 <= 
        res_8_V_03416_fu_112 when (icmp_ln203_3_fu_501_p2(0) = '1') else 
        select_ln203_5_fu_685_p3;
    res_9_V_1_fu_662_p3 <= 
        res_9_V_03222_fu_120 when (icmp_ln203_3_fu_501_p2(0) = '1') else 
        select_ln203_3_fu_654_p3;
    select_ln203_1_fu_615_p3 <= 
        acc_0_2_V_fu_400_p1 when (icmp_ln203_2_fu_495_p2(0) = '1') else 
        res_2_V_02744_fu_140;
    select_ln203_2_fu_639_p3 <= 
        acc_0_3_V_reg_1193 when (icmp_ln203_2_fu_495_p2(0) = '1') else 
        res_3_V_03032_fu_128;
    select_ln203_3_fu_654_p3 <= 
        acc_0_9_V_fu_485_p1 when (icmp_ln203_2_fu_495_p2(0) = '1') else 
        res_9_V_03222_fu_120;
    select_ln203_4_fu_670_p3 <= 
        acc_0_4_V_reg_1199 when (icmp_ln203_2_fu_495_p2(0) = '1') else 
        res_4_V_03320_fu_116;
    select_ln203_5_fu_685_p3 <= 
        acc_0_8_V_fu_438_p4 when (icmp_ln203_2_fu_495_p2(0) = '1') else 
        res_8_V_03416_fu_112;
    select_ln203_6_fu_701_p3 <= 
        acc_0_7_V_fu_434_p1 when (icmp_ln203_2_fu_495_p2(0) = '1') else 
        res_7_V_03510_fu_108;
    select_ln203_7_fu_717_p3 <= 
        acc_0_5_V_fu_403_p4 when (icmp_ln203_2_fu_495_p2(0) = '1') else 
        res_5_V_0368_fu_104;
    select_ln203_8_fu_733_p3 <= 
        acc_0_6_V_fu_421_p1 when (icmp_ln203_2_fu_495_p2(0) = '1') else 
        res_6_V_0374_fu_100;
    select_ln203_9_fu_507_p3 <= 
        trunc_ln_reg_1176 when (icmp_ln203_2_fu_495_p2(0) = '1') else 
        res_0_V_02168_fu_164;
    select_ln203_fu_541_p3 <= 
        acc_0_1_V_reg_1182 when (icmp_ln203_fu_535_p2(0) = '1') else 
        res_1_V_02456_fu_152;
        sext_ln1118_1_fu_289_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(data_buf_V_0_0_i_reg_1156),25));

        sext_ln1118_2_fu_292_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(data_buf_V_0_0_i_reg_1156),26));

        sext_ln1118_3_fu_454_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(shl_ln_fu_447_p3),25));

        sext_ln1118_4_fu_465_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(shl_ln1118_1_fu_458_p3),25));

    shl_ln1118_1_fu_458_p3 <= (data_buf_V_0_0_i_reg_1156 & ap_const_lv1_0);
    shl_ln_fu_447_p3 <= (data_buf_V_0_0_i_reg_1156 & ap_const_lv8_0);
    trunc_ln708_6_fu_412_p4 <= mul_ln1118_6_fu_1003_p2(21 downto 10);
    trunc_ln708_7_fu_425_p4 <= mul_ln1118_7_fu_1010_p2(24 downto 10);
    trunc_ln708_9_fu_475_p4 <= add_ln1118_fu_469_p2(24 downto 10);
end behav;
