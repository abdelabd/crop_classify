// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2019.1
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module pointwise_conv_2d_cl_ap_fixed_ap_fixed_16_6_5_3_0_config9_s (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_continue,
        ap_idle,
        ap_ready,
        data_V_dout,
        data_V_empty_n,
        data_V_read
);

parameter    ap_ST_fsm_state1 = 3'd1;
parameter    ap_ST_fsm_pp0_stage0 = 3'd2;
parameter    ap_ST_fsm_pp0_stage1 = 3'd4;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
input   ap_continue;
output   ap_idle;
output   ap_ready;
input  [911:0] data_V_dout;
input   data_V_empty_n;
output   data_V_read;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg data_V_read;

reg    ap_done_reg;
(* fsm_encoding = "none" *) reg   [2:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
wire   [0:0] icmp_ln36_fu_130_p2;
wire    ap_CS_fsm_pp0_stage1;
reg    ap_enable_reg_pp0_iter0;
reg   [0:0] ap_phi_mux_do_init_phi_fu_67_p6;
reg    ap_block_state3_pp0_stage1_iter0;
wire    ap_block_state5_pp0_stage1_iter1;
reg    ap_block_pp0_stage1_11001;
reg    data_V_blk_n;
wire    ap_block_pp0_stage1;
reg   [0:0] do_init_reg_62;
reg   [911:0] data_V_load_rewind_reg_79;
reg   [5:0] i_part_0_i_i2_reg_94;
reg   [911:0] data_V_load_phi_reg_109;
reg   [0:0] icmp_ln36_reg_164;
wire   [5:0] i_part_fu_140_p2;
reg   [5:0] i_part_reg_168;
wire    ap_CS_fsm_pp0_stage0;
reg    ap_enable_reg_pp0_iter1;
wire    ap_block_state2_pp0_stage0_iter0;
wire    ap_block_state4_pp0_stage0_iter1;
reg    ap_block_pp0_stage0_11001;
reg    ap_enable_reg_pp0_iter0_reg;
reg    ap_block_state1;
reg    ap_block_pp0_stage1_subdone;
wire   [15:0] grp_fill_buffer_fu_121_ap_return;
reg    grp_fill_buffer_fu_121_ap_ce;
wire    ap_block_state2_pp0_stage0_iter0_ignore_call4;
wire    ap_block_state4_pp0_stage0_iter1_ignore_call4;
reg    ap_block_pp0_stage0_11001_ignoreCallOp20;
reg    ap_block_state3_pp0_stage1_iter0_ignore_call4;
wire    ap_block_state5_pp0_stage1_iter1_ignore_call4;
reg    ap_block_pp0_stage1_11001_ignoreCallOp24;
reg   [911:0] ap_phi_mux_data_V_load_rewind_phi_fu_83_p6;
reg   [5:0] ap_phi_mux_i_part_0_i_i2_phi_fu_98_p6;
wire   [911:0] ap_phi_reg_pp0_iter0_data_V_load_phi_reg_109;
reg   [911:0] ap_phi_reg_pp0_iter1_data_V_load_phi_reg_109;
wire    ap_block_pp0_stage0;
reg   [15:0] data_buf_V_0_0_06281_i1_fu_52;
reg   [2:0] ap_NS_fsm;
reg    ap_block_pp0_stage0_subdone;
reg    ap_idle_pp0_0to0;
reg    ap_reset_idle_pp0;
reg    ap_idle_pp0;
wire    ap_enable_pp0;
reg    ap_condition_123;
reg    ap_condition_51;

// power-on initialization
initial begin
#0 ap_done_reg = 1'b0;
#0 ap_CS_fsm = 3'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter0_reg = 1'b0;
end

fill_buffer grp_fill_buffer_fu_121(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .data_V_read(ap_phi_reg_pp0_iter1_data_V_load_phi_reg_109),
    .p_read1(data_buf_V_0_0_06281_i1_fu_52),
    .partition(i_part_0_i_i2_reg_94),
    .ap_return(grp_fill_buffer_fu_121_ap_return),
    .ap_ce(grp_fill_buffer_fu_121_ap_ce)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage1_11001) & (icmp_ln36_reg_164 == 1'd1) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter0_reg <= 1'b0;
    end else begin
        if ((1'b1 == ap_CS_fsm_pp0_stage0)) begin
            ap_enable_reg_pp0_iter0_reg <= ap_start;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage1_subdone) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
            ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
        end else if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_condition_51)) begin
        if ((ap_phi_mux_do_init_phi_fu_67_p6 == 1'd0)) begin
            ap_phi_reg_pp0_iter1_data_V_load_phi_reg_109 <= ap_phi_mux_data_V_load_rewind_phi_fu_83_p6;
        end else if ((ap_phi_mux_do_init_phi_fu_67_p6 == 1'd1)) begin
            ap_phi_reg_pp0_iter1_data_V_load_phi_reg_109 <= data_V_dout;
        end else if ((1'b1 == 1'b1)) begin
            ap_phi_reg_pp0_iter1_data_V_load_phi_reg_109 <= ap_phi_reg_pp0_iter0_data_V_load_phi_reg_109;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln36_reg_164 == 1'd0) & (1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        do_init_reg_62 <= 1'd0;
    end else if ((((1'b0 == ap_block_pp0_stage1_11001) & (icmp_ln36_reg_164 == 1'd1) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1)) | (~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1)))) begin
        do_init_reg_62 <= 1'd1;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln36_reg_164 == 1'd0) & (1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        i_part_0_i_i2_reg_94 <= i_part_reg_168;
    end else if ((((1'b0 == ap_block_pp0_stage1_11001) & (icmp_ln36_reg_164 == 1'd1) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1)) | (~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1)))) begin
        i_part_0_i_i2_reg_94 <= 6'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        data_V_load_phi_reg_109 <= ap_phi_reg_pp0_iter1_data_V_load_phi_reg_109;
        i_part_reg_168 <= i_part_fu_140_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln36_reg_164 == 1'd0) & (1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        data_V_load_rewind_reg_79 <= data_V_load_phi_reg_109;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        data_buf_V_0_0_06281_i1_fu_52 <= grp_fill_buffer_fu_121_ap_return;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        icmp_ln36_reg_164 <= icmp_ln36_fu_130_p2;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage1_11001) & (icmp_ln36_reg_164 == 1'd1) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = ap_done_reg;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_pp0_stage0)) begin
        ap_enable_reg_pp0_iter0 = ap_start;
    end else begin
        ap_enable_reg_pp0_iter0 = ap_enable_reg_pp0_iter0_reg;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if ((ap_enable_reg_pp0_iter0 == 1'b0)) begin
        ap_idle_pp0_0to0 = 1'b1;
    end else begin
        ap_idle_pp0_0to0 = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln36_reg_164 == 1'd0) & (1'b0 == ap_block_pp0_stage1) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        ap_phi_mux_data_V_load_rewind_phi_fu_83_p6 = data_V_load_phi_reg_109;
    end else begin
        ap_phi_mux_data_V_load_rewind_phi_fu_83_p6 = data_V_load_rewind_reg_79;
    end
end

always @ (*) begin
    if ((1'b1 == ap_condition_123)) begin
        if ((icmp_ln36_reg_164 == 1'd1)) begin
            ap_phi_mux_do_init_phi_fu_67_p6 = 1'd1;
        end else if ((icmp_ln36_reg_164 == 1'd0)) begin
            ap_phi_mux_do_init_phi_fu_67_p6 = 1'd0;
        end else begin
            ap_phi_mux_do_init_phi_fu_67_p6 = do_init_reg_62;
        end
    end else begin
        ap_phi_mux_do_init_phi_fu_67_p6 = do_init_reg_62;
    end
end

always @ (*) begin
    if ((1'b1 == ap_condition_123)) begin
        if ((icmp_ln36_reg_164 == 1'd1)) begin
            ap_phi_mux_i_part_0_i_i2_phi_fu_98_p6 = 6'd0;
        end else if ((icmp_ln36_reg_164 == 1'd0)) begin
            ap_phi_mux_i_part_0_i_i2_phi_fu_98_p6 = i_part_reg_168;
        end else begin
            ap_phi_mux_i_part_0_i_i2_phi_fu_98_p6 = i_part_0_i_i2_reg_94;
        end
    end else begin
        ap_phi_mux_i_part_0_i_i2_phi_fu_98_p6 = i_part_0_i_i2_reg_94;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage1_11001) & (icmp_ln36_fu_130_p2 == 1'd1) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (ap_idle_pp0_0to0 == 1'b1))) begin
        ap_reset_idle_pp0 = 1'b1;
    end else begin
        ap_reset_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage1) & (ap_phi_mux_do_init_phi_fu_67_p6 == 1'd1) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        data_V_blk_n = data_V_empty_n;
    end else begin
        data_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage1_11001) & (ap_phi_mux_do_init_phi_fu_67_p6 == 1'd1) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        data_V_read = 1'b1;
    end else begin
        data_V_read = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001_ignoreCallOp20)) | ((1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_11001_ignoreCallOp24)))) begin
        grp_fill_buffer_fu_121_ap_ce = 1'b1;
    end else begin
        grp_fill_buffer_fu_121_ap_ce = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_pp0_stage0 : begin
            if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_pp0_stage1 : begin
            if (((1'b0 == ap_block_pp0_stage1_subdone) & (ap_reset_idle_pp0 == 1'b0))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else if (((1'b0 == ap_block_pp0_stage1_subdone) & (ap_reset_idle_pp0 == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage1;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_pp0_stage1 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_11001 = (ap_done_reg == 1'b1);
end

always @ (*) begin
    ap_block_pp0_stage0_11001_ignoreCallOp20 = (ap_done_reg == 1'b1);
end

always @ (*) begin
    ap_block_pp0_stage0_subdone = (ap_done_reg == 1'b1);
end

assign ap_block_pp0_stage1 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage1_11001 = ((data_V_empty_n == 1'b0) & (ap_phi_mux_do_init_phi_fu_67_p6 == 1'd1) & (ap_enable_reg_pp0_iter0 == 1'b1));
end

always @ (*) begin
    ap_block_pp0_stage1_11001_ignoreCallOp24 = ((data_V_empty_n == 1'b0) & (ap_phi_mux_do_init_phi_fu_67_p6 == 1'd1) & (ap_enable_reg_pp0_iter0 == 1'b1));
end

always @ (*) begin
    ap_block_pp0_stage1_subdone = ((data_V_empty_n == 1'b0) & (ap_phi_mux_do_init_phi_fu_67_p6 == 1'd1) & (ap_enable_reg_pp0_iter0 == 1'b1));
end

always @ (*) begin
    ap_block_state1 = ((ap_start == 1'b0) | (ap_done_reg == 1'b1));
end

assign ap_block_state2_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state2_pp0_stage0_iter0_ignore_call4 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state3_pp0_stage1_iter0 = ((data_V_empty_n == 1'b0) & (ap_phi_mux_do_init_phi_fu_67_p6 == 1'd1));
end

always @ (*) begin
    ap_block_state3_pp0_stage1_iter0_ignore_call4 = ((data_V_empty_n == 1'b0) & (ap_phi_mux_do_init_phi_fu_67_p6 == 1'd1));
end

assign ap_block_state4_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state4_pp0_stage0_iter1_ignore_call4 = ~(1'b1 == 1'b1);

assign ap_block_state5_pp0_stage1_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state5_pp0_stage1_iter1_ignore_call4 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_condition_123 = ((1'b0 == ap_block_pp0_stage1) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1));
end

always @ (*) begin
    ap_condition_51 = ((1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1));
end

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_phi_reg_pp0_iter0_data_V_load_phi_reg_109 = 'bx;

assign i_part_fu_140_p2 = (i_part_0_i_i2_reg_94 + 6'd1);

assign icmp_ln36_fu_130_p2 = ((ap_phi_mux_i_part_0_i_i2_phi_fu_98_p6 == 6'd56) ? 1'b1 : 1'b0);

endmodule //pointwise_conv_2d_cl_ap_fixed_ap_fixed_16_6_5_3_0_config9_s
