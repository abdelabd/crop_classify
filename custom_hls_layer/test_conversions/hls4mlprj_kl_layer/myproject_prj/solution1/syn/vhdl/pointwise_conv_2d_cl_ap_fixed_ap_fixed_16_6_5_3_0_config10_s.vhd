-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2019.1
-- Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity pointwise_conv_2d_cl_ap_fixed_ap_fixed_16_6_5_3_0_config10_s is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_continue : IN STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    data_V_dout : IN STD_LOGIC_VECTOR (911 downto 0);
    data_V_empty_n : IN STD_LOGIC;
    data_V_read : OUT STD_LOGIC );
end;


architecture behav of pointwise_conv_2d_cl_ap_fixed_ap_fixed_16_6_5_3_0_config10_s is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (2 downto 0) := "001";
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (2 downto 0) := "010";
    constant ap_ST_fsm_pp0_stage1 : STD_LOGIC_VECTOR (2 downto 0) := "100";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv6_0 : STD_LOGIC_VECTOR (5 downto 0) := "000000";
    constant ap_const_lv6_38 : STD_LOGIC_VECTOR (5 downto 0) := "111000";
    constant ap_const_lv6_1 : STD_LOGIC_VECTOR (5 downto 0) := "000001";

    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_CS_fsm : STD_LOGIC_VECTOR (2 downto 0) := "001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal icmp_ln36_fu_130_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_pp0_stage1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage1 : signal is "none";
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC;
    signal ap_phi_mux_do_init_phi_fu_67_p6 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_block_state3_pp0_stage1_iter0 : BOOLEAN;
    signal ap_block_state5_pp0_stage1_iter1 : BOOLEAN;
    signal ap_block_pp0_stage1_11001 : BOOLEAN;
    signal data_V_blk_n : STD_LOGIC;
    signal ap_block_pp0_stage1 : BOOLEAN;
    signal do_init_reg_62 : STD_LOGIC_VECTOR (0 downto 0);
    signal data_V_load_rewind_reg_79 : STD_LOGIC_VECTOR (911 downto 0);
    signal i_part_0_i_i2_reg_94 : STD_LOGIC_VECTOR (5 downto 0);
    signal data_V_load_phi_reg_109 : STD_LOGIC_VECTOR (911 downto 0);
    signal icmp_ln36_reg_164 : STD_LOGIC_VECTOR (0 downto 0);
    signal i_part_fu_140_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal i_part_reg_168 : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_block_state2_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state4_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal ap_enable_reg_pp0_iter0_reg : STD_LOGIC := '0';
    signal ap_block_state1 : BOOLEAN;
    signal ap_block_pp0_stage1_subdone : BOOLEAN;
    signal grp_fill_buffer_1_fu_121_ap_return : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fill_buffer_1_fu_121_ap_ce : STD_LOGIC;
    signal ap_block_state2_pp0_stage0_iter0_ignore_call4 : BOOLEAN;
    signal ap_block_state4_pp0_stage0_iter1_ignore_call4 : BOOLEAN;
    signal ap_block_pp0_stage0_11001_ignoreCallOp20 : BOOLEAN;
    signal ap_block_state3_pp0_stage1_iter0_ignore_call4 : BOOLEAN;
    signal ap_block_state5_pp0_stage1_iter1_ignore_call4 : BOOLEAN;
    signal ap_block_pp0_stage1_11001_ignoreCallOp24 : BOOLEAN;
    signal ap_phi_mux_data_V_load_rewind_phi_fu_83_p6 : STD_LOGIC_VECTOR (911 downto 0);
    signal ap_phi_mux_i_part_0_i_i2_phi_fu_98_p6 : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_phi_reg_pp0_iter0_data_V_load_phi_reg_109 : STD_LOGIC_VECTOR (911 downto 0);
    signal ap_phi_reg_pp0_iter1_data_V_load_phi_reg_109 : STD_LOGIC_VECTOR (911 downto 0);
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal data_buf_V_0_0_06281_i1_fu_52 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal ap_idle_pp0_0to0 : STD_LOGIC;
    signal ap_reset_idle_pp0 : STD_LOGIC;
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_enable_pp0 : STD_LOGIC;
    signal ap_condition_123 : BOOLEAN;
    signal ap_condition_51 : BOOLEAN;

    component fill_buffer_1 IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        data_V_read : IN STD_LOGIC_VECTOR (911 downto 0);
        p_read1 : IN STD_LOGIC_VECTOR (15 downto 0);
        partition : IN STD_LOGIC_VECTOR (5 downto 0);
        ap_return : OUT STD_LOGIC_VECTOR (15 downto 0);
        ap_ce : IN STD_LOGIC );
    end component;



begin
    grp_fill_buffer_1_fu_121 : component fill_buffer_1
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        data_V_read => ap_phi_reg_pp0_iter1_data_V_load_phi_reg_109,
        p_read1 => data_buf_V_0_0_06281_i1_fu_52,
        partition => i_part_0_i_i2_reg_94,
        ap_return => grp_fill_buffer_1_fu_121_ap_return,
        ap_ce => grp_fill_buffer_1_fu_121_ap_ce);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (icmp_ln36_reg_164 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter0_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter0_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) then 
                    ap_enable_reg_pp0_iter0_reg <= ap_start;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage1_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                    ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
                elsif ((not(((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                    ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ap_phi_reg_pp0_iter1_data_V_load_phi_reg_109_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_1 = ap_condition_51)) then
                if ((ap_phi_mux_do_init_phi_fu_67_p6 = ap_const_lv1_0)) then 
                    ap_phi_reg_pp0_iter1_data_V_load_phi_reg_109 <= ap_phi_mux_data_V_load_rewind_phi_fu_83_p6;
                elsif ((ap_phi_mux_do_init_phi_fu_67_p6 = ap_const_lv1_1)) then 
                    ap_phi_reg_pp0_iter1_data_V_load_phi_reg_109 <= data_V_dout;
                elsif ((ap_const_boolean_1 = ap_const_boolean_1)) then 
                    ap_phi_reg_pp0_iter1_data_V_load_phi_reg_109 <= ap_phi_reg_pp0_iter0_data_V_load_phi_reg_109;
                end if;
            end if; 
        end if;
    end process;

    do_init_reg_62_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln36_reg_164 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                do_init_reg_62 <= ap_const_lv1_0;
            elsif ((((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (icmp_ln36_reg_164 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1)) or (not(((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
                do_init_reg_62 <= ap_const_lv1_1;
            end if; 
        end if;
    end process;

    i_part_0_i_i2_reg_94_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln36_reg_164 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                i_part_0_i_i2_reg_94 <= i_part_reg_168;
            elsif ((((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (icmp_ln36_reg_164 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1)) or (not(((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
                i_part_0_i_i2_reg_94 <= ap_const_lv6_0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                data_V_load_phi_reg_109 <= ap_phi_reg_pp0_iter1_data_V_load_phi_reg_109;
                i_part_reg_168 <= i_part_fu_140_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln36_reg_164 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then
                data_V_load_rewind_reg_79 <= data_V_load_phi_reg_109;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then
                data_buf_V_0_0_06281_i1_fu_52 <= grp_fill_buffer_1_fu_121_ap_return;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then
                icmp_ln36_reg_164 <= icmp_ln36_fu_130_p2;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_start, ap_done_reg, ap_CS_fsm, ap_CS_fsm_state1, ap_block_pp0_stage1_subdone, ap_block_pp0_stage0_subdone, ap_reset_idle_pp0)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if ((not(((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_pp0_stage0 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage1;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                end if;
            when ap_ST_fsm_pp0_stage1 => 
                if (((ap_const_boolean_0 = ap_block_pp0_stage1_subdone) and (ap_reset_idle_pp0 = ap_const_logic_0))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage1_subdone) and (ap_reset_idle_pp0 = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage1;
                end if;
            when others =>  
                ap_NS_fsm <= "XXX";
        end case;
    end process;
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(1);
    ap_CS_fsm_pp0_stage1 <= ap_CS_fsm(2);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage0_11001_assign_proc : process(ap_done_reg)
    begin
                ap_block_pp0_stage0_11001 <= (ap_done_reg = ap_const_logic_1);
    end process;


    ap_block_pp0_stage0_11001_ignoreCallOp20_assign_proc : process(ap_done_reg)
    begin
                ap_block_pp0_stage0_11001_ignoreCallOp20 <= (ap_done_reg = ap_const_logic_1);
    end process;


    ap_block_pp0_stage0_subdone_assign_proc : process(ap_done_reg)
    begin
                ap_block_pp0_stage0_subdone <= (ap_done_reg = ap_const_logic_1);
    end process;

        ap_block_pp0_stage1 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage1_11001_assign_proc : process(ap_enable_reg_pp0_iter0, data_V_empty_n, ap_phi_mux_do_init_phi_fu_67_p6)
    begin
                ap_block_pp0_stage1_11001 <= ((data_V_empty_n = ap_const_logic_0) and (ap_phi_mux_do_init_phi_fu_67_p6 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1));
    end process;


    ap_block_pp0_stage1_11001_ignoreCallOp24_assign_proc : process(ap_enable_reg_pp0_iter0, data_V_empty_n, ap_phi_mux_do_init_phi_fu_67_p6)
    begin
                ap_block_pp0_stage1_11001_ignoreCallOp24 <= ((data_V_empty_n = ap_const_logic_0) and (ap_phi_mux_do_init_phi_fu_67_p6 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1));
    end process;


    ap_block_pp0_stage1_subdone_assign_proc : process(ap_enable_reg_pp0_iter0, data_V_empty_n, ap_phi_mux_do_init_phi_fu_67_p6)
    begin
                ap_block_pp0_stage1_subdone <= ((data_V_empty_n = ap_const_logic_0) and (ap_phi_mux_do_init_phi_fu_67_p6 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1));
    end process;


    ap_block_state1_assign_proc : process(ap_start, ap_done_reg)
    begin
                ap_block_state1 <= ((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1));
    end process;

        ap_block_state2_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state2_pp0_stage0_iter0_ignore_call4 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state3_pp0_stage1_iter0_assign_proc : process(data_V_empty_n, ap_phi_mux_do_init_phi_fu_67_p6)
    begin
                ap_block_state3_pp0_stage1_iter0 <= ((data_V_empty_n = ap_const_logic_0) and (ap_phi_mux_do_init_phi_fu_67_p6 = ap_const_lv1_1));
    end process;


    ap_block_state3_pp0_stage1_iter0_ignore_call4_assign_proc : process(data_V_empty_n, ap_phi_mux_do_init_phi_fu_67_p6)
    begin
                ap_block_state3_pp0_stage1_iter0_ignore_call4 <= ((data_V_empty_n = ap_const_logic_0) and (ap_phi_mux_do_init_phi_fu_67_p6 = ap_const_lv1_1));
    end process;

        ap_block_state4_pp0_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state4_pp0_stage0_iter1_ignore_call4 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state5_pp0_stage1_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state5_pp0_stage1_iter1_ignore_call4 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_condition_123_assign_proc : process(ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1, ap_enable_reg_pp0_iter1)
    begin
                ap_condition_123 <= ((ap_const_boolean_0 = ap_block_pp0_stage1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1));
    end process;


    ap_condition_51_assign_proc : process(ap_CS_fsm_pp0_stage1, ap_enable_reg_pp0_iter0, ap_block_pp0_stage1_11001)
    begin
                ap_condition_51 <= ((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1));
    end process;


    ap_done_assign_proc : process(ap_done_reg, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_11001, icmp_ln36_reg_164, ap_enable_reg_pp0_iter1)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (icmp_ln36_reg_164 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_done_reg;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);

    ap_enable_reg_pp0_iter0_assign_proc : process(ap_start, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0_reg)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) then 
            ap_enable_reg_pp0_iter0 <= ap_start;
        else 
            ap_enable_reg_pp0_iter0 <= ap_enable_reg_pp0_iter0_reg;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_0to0_assign_proc : process(ap_enable_reg_pp0_iter0)
    begin
        if ((ap_enable_reg_pp0_iter0 = ap_const_logic_0)) then 
            ap_idle_pp0_0to0 <= ap_const_logic_1;
        else 
            ap_idle_pp0_0to0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_phi_mux_data_V_load_rewind_phi_fu_83_p6_assign_proc : process(ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1, data_V_load_rewind_reg_79, data_V_load_phi_reg_109, icmp_ln36_reg_164, ap_enable_reg_pp0_iter1)
    begin
        if (((icmp_ln36_reg_164 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
            ap_phi_mux_data_V_load_rewind_phi_fu_83_p6 <= data_V_load_phi_reg_109;
        else 
            ap_phi_mux_data_V_load_rewind_phi_fu_83_p6 <= data_V_load_rewind_reg_79;
        end if; 
    end process;


    ap_phi_mux_do_init_phi_fu_67_p6_assign_proc : process(do_init_reg_62, icmp_ln36_reg_164, ap_condition_123)
    begin
        if ((ap_const_boolean_1 = ap_condition_123)) then
            if ((icmp_ln36_reg_164 = ap_const_lv1_1)) then 
                ap_phi_mux_do_init_phi_fu_67_p6 <= ap_const_lv1_1;
            elsif ((icmp_ln36_reg_164 = ap_const_lv1_0)) then 
                ap_phi_mux_do_init_phi_fu_67_p6 <= ap_const_lv1_0;
            else 
                ap_phi_mux_do_init_phi_fu_67_p6 <= do_init_reg_62;
            end if;
        else 
            ap_phi_mux_do_init_phi_fu_67_p6 <= do_init_reg_62;
        end if; 
    end process;


    ap_phi_mux_i_part_0_i_i2_phi_fu_98_p6_assign_proc : process(i_part_0_i_i2_reg_94, icmp_ln36_reg_164, i_part_reg_168, ap_condition_123)
    begin
        if ((ap_const_boolean_1 = ap_condition_123)) then
            if ((icmp_ln36_reg_164 = ap_const_lv1_1)) then 
                ap_phi_mux_i_part_0_i_i2_phi_fu_98_p6 <= ap_const_lv6_0;
            elsif ((icmp_ln36_reg_164 = ap_const_lv1_0)) then 
                ap_phi_mux_i_part_0_i_i2_phi_fu_98_p6 <= i_part_reg_168;
            else 
                ap_phi_mux_i_part_0_i_i2_phi_fu_98_p6 <= i_part_0_i_i2_reg_94;
            end if;
        else 
            ap_phi_mux_i_part_0_i_i2_phi_fu_98_p6 <= i_part_0_i_i2_reg_94;
        end if; 
    end process;

    ap_phi_reg_pp0_iter0_data_V_load_phi_reg

    ap_ready_assign_proc : process(icmp_ln36_fu_130_p2, ap_CS_fsm_pp0_stage1, ap_enable_reg_pp0_iter0, ap_block_pp0_stage1_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (icmp_ln36_fu_130_p2 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    ap_reset_idle_pp0_assign_proc : process(ap_start, ap_idle_pp0_0to0)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_idle_pp0_0to0 = ap_const_logic_1))) then 
            ap_reset_idle_pp0 <= ap_const_logic_1;
        else 
            ap_reset_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    data_V_blk_n_assign_proc : process(ap_CS_fsm_pp0_stage1, ap_enable_reg_pp0_iter0, data_V_empty_n, ap_phi_mux_do_init_phi_fu_67_p6, ap_block_pp0_stage1)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage1) and (ap_phi_mux_do_init_phi_fu_67_p6 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
            data_V_blk_n <= data_V_empty_n;
        else 
            data_V_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    data_V_read_assign_proc : process(ap_CS_fsm_pp0_stage1, ap_enable_reg_pp0_iter0, ap_phi_mux_do_init_phi_fu_67_p6, ap_block_pp0_stage1_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_phi_mux_do_init_phi_fu_67_p6 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
            data_V_read <= ap_const_logic_1;
        else 
            data_V_read <= ap_const_logic_0;
        end if; 
    end process;


    grp_fill_buffer_1_fu_121_ap_ce_assign_proc : process(ap_CS_fsm_pp0_stage1, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001_ignoreCallOp20, ap_block_pp0_stage1_11001_ignoreCallOp24)
    begin
        if ((((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001_ignoreCallOp20)) or ((ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001_ignoreCallOp24)))) then 
            grp_fill_buffer_1_fu_121_ap_ce <= ap_const_logic_1;
        else 
            grp_fill_buffer_1_fu_121_ap_ce <= ap_const_logic_0;
        end if; 
    end process;

    i_part_fu_140_p2 <= std_logic_vector(unsigned(i_part_0_i_i2_reg_94) + unsigned(ap_const_lv6_1));
    icmp_ln36_fu_130_p2 <= "1" when (ap_phi_mux_i_part_0_i_i2_phi_fu_98_p6 = ap_const_lv6_38) else "0";
end behav;
