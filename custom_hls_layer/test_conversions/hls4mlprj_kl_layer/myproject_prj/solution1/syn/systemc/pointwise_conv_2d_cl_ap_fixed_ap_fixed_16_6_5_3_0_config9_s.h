// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2019.1
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#ifndef _pointwise_conv_2d_cl_ap_fixed_ap_fixed_16_6_5_3_0_config9_s_HH_
#define _pointwise_conv_2d_cl_ap_fixed_ap_fixed_16_6_5_3_0_config9_s_HH_

#include "systemc.h"
#include "AESL_pkg.h"

#include "fill_buffer.h"

namespace ap_rtl {

struct pointwise_conv_2d_cl_ap_fixed_ap_fixed_16_6_5_3_0_config9_s : public sc_module {
    // Port declarations 10
    sc_in_clk ap_clk;
    sc_in< sc_logic > ap_rst;
    sc_in< sc_logic > ap_start;
    sc_out< sc_logic > ap_done;
    sc_in< sc_logic > ap_continue;
    sc_out< sc_logic > ap_idle;
    sc_out< sc_logic > ap_ready;
    sc_in< sc_lv<912> > data_V_dout;
    sc_in< sc_logic > data_V_empty_n;
    sc_out< sc_logic > data_V_read;


    // Module declarations
    pointwise_conv_2d_cl_ap_fixed_ap_fixed_16_6_5_3_0_config9_s(sc_module_name name);
    SC_HAS_PROCESS(pointwise_conv_2d_cl_ap_fixed_ap_fixed_16_6_5_3_0_config9_s);

    ~pointwise_conv_2d_cl_ap_fixed_ap_fixed_16_6_5_3_0_config9_s();

    sc_trace_file* mVcdFile;

    fill_buffer* grp_fill_buffer_fu_121;
    sc_signal< sc_logic > ap_done_reg;
    sc_signal< sc_lv<3> > ap_CS_fsm;
    sc_signal< sc_logic > ap_CS_fsm_state1;
    sc_signal< sc_lv<1> > icmp_ln36_fu_130_p2;
    sc_signal< sc_logic > ap_CS_fsm_pp0_stage1;
    sc_signal< sc_logic > ap_enable_reg_pp0_iter0;
    sc_signal< sc_lv<1> > ap_phi_mux_do_init_phi_fu_67_p6;
    sc_signal< bool > ap_block_state3_pp0_stage1_iter0;
    sc_signal< bool > ap_block_state5_pp0_stage1_iter1;
    sc_signal< bool > ap_block_pp0_stage1_11001;
    sc_signal< sc_logic > data_V_blk_n;
    sc_signal< bool > ap_block_pp0_stage1;
    sc_signal< sc_lv<1> > do_init_reg_62;
    sc_signal< sc_lv<912> > data_V_load_rewind_reg_79;
    sc_signal< sc_lv<6> > i_part_0_i_i2_reg_94;
    sc_signal< sc_lv<912> > data_V_load_phi_reg_109;
    sc_signal< sc_lv<1> > icmp_ln36_reg_164;
    sc_signal< sc_lv<6> > i_part_fu_140_p2;
    sc_signal< sc_lv<6> > i_part_reg_168;
    sc_signal< sc_logic > ap_CS_fsm_pp0_stage0;
    sc_signal< sc_logic > ap_enable_reg_pp0_iter1;
    sc_signal< bool > ap_block_state2_pp0_stage0_iter0;
    sc_signal< bool > ap_block_state4_pp0_stage0_iter1;
    sc_signal< bool > ap_block_pp0_stage0_11001;
    sc_signal< sc_logic > ap_enable_reg_pp0_iter0_reg;
    sc_signal< bool > ap_block_state1;
    sc_signal< bool > ap_block_pp0_stage1_subdone;
    sc_signal< sc_lv<16> > grp_fill_buffer_fu_121_ap_return;
    sc_signal< sc_logic > grp_fill_buffer_fu_121_ap_ce;
    sc_signal< bool > ap_block_state2_pp0_stage0_iter0_ignore_call4;
    sc_signal< bool > ap_block_state4_pp0_stage0_iter1_ignore_call4;
    sc_signal< bool > ap_block_pp0_stage0_11001_ignoreCallOp20;
    sc_signal< bool > ap_block_state3_pp0_stage1_iter0_ignore_call4;
    sc_signal< bool > ap_block_state5_pp0_stage1_iter1_ignore_call4;
    sc_signal< bool > ap_block_pp0_stage1_11001_ignoreCallOp24;
    sc_signal< sc_lv<912> > ap_phi_mux_data_V_load_rewind_phi_fu_83_p6;
    sc_signal< sc_lv<6> > ap_phi_mux_i_part_0_i_i2_phi_fu_98_p6;
    sc_signal< sc_lv<912> > ap_phi_reg_pp0_iter0_data_V_load_phi_reg_109;
    sc_signal< sc_lv<912> > ap_phi_reg_pp0_iter1_data_V_load_phi_reg_109;
    sc_signal< bool > ap_block_pp0_stage0;
    sc_signal< sc_lv<16> > data_buf_V_0_0_06281_i1_fu_52;
    sc_signal< sc_lv<3> > ap_NS_fsm;
    sc_signal< bool > ap_block_pp0_stage0_subdone;
    sc_signal< sc_logic > ap_idle_pp0_0to0;
    sc_signal< sc_logic > ap_reset_idle_pp0;
    sc_signal< sc_logic > ap_idle_pp0;
    sc_signal< sc_logic > ap_enable_pp0;
    sc_signal< bool > ap_condition_123;
    sc_signal< bool > ap_condition_51;
    static const sc_logic ap_const_logic_1;
    static const sc_logic ap_const_logic_0;
    static const sc_lv<3> ap_ST_fsm_state1;
    static const sc_lv<3> ap_ST_fsm_pp0_stage0;
    static const sc_lv<3> ap_ST_fsm_pp0_stage1;
    static const sc_lv<32> ap_const_lv32_0;
    static const bool ap_const_boolean_1;
    static const sc_lv<1> ap_const_lv1_1;
    static const sc_lv<32> ap_const_lv32_2;
    static const bool ap_const_boolean_0;
    static const sc_lv<32> ap_const_lv32_1;
    static const sc_lv<1> ap_const_lv1_0;
    static const sc_lv<6> ap_const_lv6_0;
    static const sc_lv<6> ap_const_lv6_38;
    static const sc_lv<6> ap_const_lv6_1;
    // Thread declarations
    void thread_ap_clk_no_reset_();
    void thread_ap_CS_fsm_pp0_stage0();
    void thread_ap_CS_fsm_pp0_stage1();
    void thread_ap_CS_fsm_state1();
    void thread_ap_block_pp0_stage0();
    void thread_ap_block_pp0_stage0_11001();
    void thread_ap_block_pp0_stage0_11001_ignoreCallOp20();
    void thread_ap_block_pp0_stage0_subdone();
    void thread_ap_block_pp0_stage1();
    void thread_ap_block_pp0_stage1_11001();
    void thread_ap_block_pp0_stage1_11001_ignoreCallOp24();
    void thread_ap_block_pp0_stage1_subdone();
    void thread_ap_block_state1();
    void thread_ap_block_state2_pp0_stage0_iter0();
    void thread_ap_block_state2_pp0_stage0_iter0_ignore_call4();
    void thread_ap_block_state3_pp0_stage1_iter0();
    void thread_ap_block_state3_pp0_stage1_iter0_ignore_call4();
    void thread_ap_block_state4_pp0_stage0_iter1();
    void thread_ap_block_state4_pp0_stage0_iter1_ignore_call4();
    void thread_ap_block_state5_pp0_stage1_iter1();
    void thread_ap_block_state5_pp0_stage1_iter1_ignore_call4();
    void thread_ap_condition_123();
    void thread_ap_condition_51();
    void thread_ap_done();
    void thread_ap_enable_pp0();
    void thread_ap_enable_reg_pp0_iter0();
    void thread_ap_idle();
    void thread_ap_idle_pp0();
    void thread_ap_idle_pp0_0to0();
    void thread_ap_phi_mux_data_V_load_rewind_phi_fu_83_p6();
    void thread_ap_phi_mux_do_init_phi_fu_67_p6();
    void thread_ap_phi_mux_i_part_0_i_i2_phi_fu_98_p6();
    void thread_ap_phi_reg_pp0_iter0_data_V_load_phi_reg_109();
    void thread_ap_ready();
    void thread_ap_reset_idle_pp0();
    void thread_data_V_blk_n();
    void thread_data_V_read();
    void thread_grp_fill_buffer_fu_121_ap_ce();
    void thread_i_part_fu_140_p2();
    void thread_icmp_ln36_fu_130_p2();
    void thread_ap_NS_fsm();
};

}

using namespace ap_rtl;

#endif
